syntax = "proto3";

package proto_pharmacy;


service API {
  rpc GetGoodsOnCompetitorSku(RequestOnCompetitorSku) returns (ResponseOnCompetitorSku) {}
  rpc GetAllProducts(RequestAllProducts) returns (ResponseAllProducts) {}
  rpc GetGoodsOnOneCodePuls(RequestOnOneCodePuls) returns (ResponseOnOneCodePuls) {}
  rpc GetCities(RequestCityAndShop) returns (ResponseCities) {}
  rpc GetShops(RequestCityAndShop) returns (ResponseShops) {}
}

message RequestCityAndShop {
  string api_key = 1;
}

message ResponseCities {
  ErrorResponse errors = 1;
  repeated City cities = 2;
}

message ResponseShops {
  ErrorResponse errors = 1;
  repeated Shop shops = 2;
}

message ErrorResponse {
  bool is_error = 1;
  string msg = 2;
}

// Запрос на получение сопоставленных по коду Puls ----|
message RequestOnOneCodePuls {
  string api_key = 1;
  int64 limit = 2;
  int64 last_id = 3;
  string date_updated_lte = 4;
  string date_updated_gte = 5;
  string puls_code = 6;
  int64 city_id = 7;
}

message ResponseOnOneCodePuls {
  ErrorResponse errors = 1;
  int64 last_id = 2;
  int64 limit = 3;
  string date_updated_lte = 4;
  string date_updated_gte = 5;
  repeated Product goods = 6;
}
// ----------------------------------------------------|


// Запрос для получения всех данных (limit/last_id) ---|
message RequestAllProducts {
  string api_key = 1;
  int64 limit = 2;
  int64 last_id = 3;
  string date_updated_lte = 4;
  string date_updated_gte = 5;
  int64 city_id = 6;
}

message ResponseAllProducts {
  ErrorResponse errors = 1;
  int64 last_id = 2;
  int64 limit = 3;
  string date_updated_lte = 4;
  string date_updated_gte = 5;
  repeated Puls goods = 6;
}
// ----------------------------------------------------|


// Запрос с списком sku конкурента ------|
message RequestOnCompetitorSku {
  string api_key = 1;
  string competitor_name = 2;
  repeated string codes = 3;
  string date_updated_lte = 4;
  string date_updated_gte = 5;
  int64 last_id = 6;
  int64 limit = 7;
}

message ResponseOnCompetitorSku {
  ErrorResponse errors = 1;
  repeated Product goods = 2;
  int64 last_id = 3;
  int64 limit = 4;
  string date_updated_lte = 5;
  string date_updated_gte = 6;
}
// ---------------------------------------|


// Запрос на получение транзитивных связей ----|
message RequestTransit {
  string api_key = 1;
  string from = 2; // название площадки откуда запрашиваем товар
  string in = 3; // название площадки через которую достаем товар по транзитной связи
  string date_updated_lte = 4;
  string date_updated_gte = 5;
  string sku = 6;
  int64 city_id = 7;
  int64 last_id = 8;
  int64 limit = 9;

}

message ResponseTransit {
  ErrorResponse errors = 1;
  int64 last_id = 2;
  int64 limit = 3;
  string date_updated_lte = 4;
  string date_updated_gte = 5;
  string from = 6;
  string in = 7;
  Product product = 9;
  repeated Product goods_transit = 10;
}
// ----------------------------------------------------|


// Модели данных -------------------------|
message Puls {
  int64 id = 1;
  string puls_code = 2;
  string name = 3;
  string manufacturer = 4;
  repeated Product competitor_goods = 5;
}

message Product {
  int64 id = 1;
  string sku = 2;
  string article = 3;
  string name = 4;
  int64 price = 5;
  int64 price_old = 6;
  bool is_active = 7;
  string brand = 8;
  string manufacturer = 9;
  string country = 10;
  string url = 11;
  string category = 12;
  string date_updated = 13;
  string shop_name = 14;
  int64 city_id = 15;
  int64 shop_id = 16;
  string puls_code = 17;
}

message City {
  int64 id = 1;
  string name = 2;
}

message Shop {
  int64 id = 1;
  string name = 2;
}
// ---------------------------------------|
